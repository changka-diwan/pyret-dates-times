#lang scribble/manual
@(require "../../scribble-api.rkt" "../abbrevs.rkt")
@(require (only-in scribble/core delayed-block))

@(define (d-method name #:args args #:return ret #:contract contract)
   (method-doc "Duration" "duration" name #:alt-docstrings "" #:args args #:return ret #:contract contract))

@(append-gen-docs
  `(module "duration"
     (path "src/js/base/runtime-anf.js")
     (data-spec
      (name "Duration")
      (variants ("duration"))
      (shared (
               (method-spec (name "get"))
               (method-spec (name "get-units"))
               (method-spec (name "normalize"))
               (method-spec (name "get-hms"))
               (method-spec (name "get-hms-normalized"))
               (method-spec (name "get-ymd"))
               (method-spec (name "get-ymd-normalized"))
               (method-spec (name "abs"))
               (method-spec (name "abs-normalized"))
               (method-spec (name "map"))
               (method-spec (name "multiplied-by"))
               (method-spec (name "divided-by"))
               (method-spec (name "equals"))
               (method-spec (name "equals-normalized"))
               (method-spec (name "any"))
               (method-spec (name "all"))
               (method-spec (name "is-negative"))
               (method-spec (name "is-zero"))
               (method-spec (name "get-years"))
               (method-spec (name "get-months"))
               (method-spec (name "get-days"))
               (method-spec (name "get-hours"))
               (method-spec (name "get-minutes"))
               (method-spec (name "get-seconds"))
               (method-spec (name "change-unit"))
               (method-spec (name "minus"))
               (method-spec (name "minus-unit"))
               (method-spec (name "minus-years"))
               (method-spec (name "minus-months"))
               (method-spec (name "minus-days"))
               (method-spec (name "minus-hours"))
               (method-spec (name "minus-minutes"))
               (method-spec (name "minus-seconds"))
               (method-spec (name "plus"))
               (method-spec (name "plus-unit"))
               (method-spec (name "plus-years"))
               (method-spec (name "plus-months"))
               (method-spec (name "plus-days"))
               (method-spec (name "plus-hours"))
               (method-spec (name "plus-minutes"))
               (method-spec (name "plus-seconds"))
               (method-spec (name "to-unit"))
               (method-spec (name "to-years"))
               (method-spec (name "to-months"))
               (method-spec (name "to-days"))
               (method-spec (name "to-hours"))
               (method-spec (name "to-minutes"))
               (method-spec (name "to-seconds"))
               (method-spec (name "to-string"))
               )))
     (fun-spec (name "make-duration"))
     (fun-spec (name "duration"))
     
     (fun-spec (name "duration-of-any"))
     (fun-spec (name "duration-of-ymd"))
     (fun-spec (name "duration-of-hms"))
     (fun-spec (name "duration-of-years"))
     (fun-spec (name "duration-of-months"))
     (fun-spec (name "duration-of-days"))
     (fun-spec (name "duration-of-hours"))
     (fun-spec (name "duration-of-minutes"))
     (fun-spec (name "duration-of-seconds"))
     ))

@docmodule["duration"]{

 @ignore[(list "make-duration")]

 @section{The Duration Datatype}

 @data-spec2["Duration" '() (list
                             @constructor-spec["Duration" "duration"
                                               (list `("year" ("type" "normal") ("contract" ,(a-id "Number")))
                                                     `("month" ("type" "normal") ("contract" ,(a-id "Number")))
                                                     `("day" ("type" "normal") ("contract" ,(a-id "Number")))
                                                     `("hour" ("type" "normal") ("contract" ,(a-id "Number")))
                                                     `("minute" ("type" "normal") ("contract" ,(a-id "Number")))
                                                     `("second" ("type" "normal") ("contract" ,(a-id "Number"))))])]
 @nested[#:style 'inset]{                  
  The Duration type has several fields, combinations of
  which allow different ways of representing the amounts
  of time this library provides.

  The functions associated with this type include several
  constructors that ensure users need not directly access
  this data type to construct simpler versions of durations
  (i.e. only years, days, or hour-minute-second triples, etc.).

  @margin-note{In conversions and normalization, Duration
   assumes that a "month" duration is equivalent to 30 days
   and a "year" duration is equivalent to 365 days. This is
   done for uniformity, and differences in actual month/year
   lengths are more accurately reflected in the Temporal types.}

  There are no variants for Duration, and programs cannot use
  @pyret{cases} statements with Durations.  Instead, they can be
  created and manipulated with the methods and functions below.
 }

 @section{Duration Methods}

 @d-method["get"
           #:contract (a-arrow D TU N)
           #:args (list (list "self" #f) (list "unit" #f))
           #:return D
           ]

 Gets the value of the requested unit.

 @examples{
  check:
    duration(1, 11, 6, -4, 2, -4.5).get(unit-month) is 11
    duration(0, 0, 0, 41.3, 0, 0).get(unit-day) is 0
  end
 }

 @d-method["get-units"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Returns a list of non-0 units uniquely defining the value of this Duration.

 @examples{
  check:
    duration(1, 1, 1, 1, 1, 1).get-units()
      is [list: unit-year, unit-month, unit-day, unit-hour, unit-minute, unit-second]
    duration(0, 0, 2, -1.1, -5, 0).get-units()
      is [list: unit-day, unit-hour, unit-minute]
    duration(0, 0, 0, 0, 0, 0).get-units() is empty
  end
 }

 @d-method["normalize"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Normalize the Duration into seconds and perform greedy division into a new Duration.

 @margin-note{A normalized Duration is greedily divided such that its
  year attribute, followed by month attribute, and so on are as large
  as possible, implying that only the seconds attribute may be non-integer}

 @examples{
  check:
    duration(1, 2, 3, 4, 5, 6).normalize()
      is duration(1, 2, 3, 4, 5, 6)
    duration(1, 12, 30, 24, 60, 60).normalize()
      is duration(2, 0, 26, 1, 1, 0)
    duration(-1, 2, -3, 4, -5, 6).normalize()
      is duration(0, -10, -7, -20, -4, -54)
  end
 }

 @d-method["get-hms"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Obtains a Duration containing the hours, minutes, and seconds from the Duration on which this method is called.

 @examples{
  check:
    duration(10, 20, 30, 40, 50, 60).get-hms()
      is duration(0, 0, 0, 40, 50, 60)
    duration(1, 2, 3, 0, 0, 0).get-hms()
      is duration(0, 0, 0, 0, 0, 0)
  end
 }

 @d-method["get-hms-normalized"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Obtains and normalizes a Duration containing the hours, minutes, and
 seconds from the Duration on which this method is called.

 @examples{
  check:
    duration(10, 20, 30, 40, 50, 60).get-hms-normalized()
      is duration(0, 0, 0, 102760, 51, 0)
    duration(1, 2, 3, 0, 0, 0).get-hms-normalized()
      is duration(0, 0, 0, 10272, 0, 0)
  end
 }

 @d-method["get-ymd"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Obtains a Duration containing the years, months, and days from the Duration on which this method is called.

 @examples{
  check:
    duration(10, 20, 30, 40, 50, 60).get-ymd()
      is duration(10, 20, 30)
    duration(0, 0, 0, 1, 2, 3).get-ymd()
      is duration(0, 0, 0)
  end
 }

 @d-method["get-ymd-normalized"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Obtains and normalizes a Duration containing the years, months, and days from the Duration on which this method is called.

 @examples{
  check:
    duration(10, 20, 30, 40, 50, 60).get-ymd-normalized()
      is duration(11, 8, 12817/480, 0, 0, 0)
    duration(0, 0, 0, 1, 2, 3).get-ymd-normalized()
      is duration(0, 0, 1241/28800, 0, 0, 0)
  end
 }

 @d-method["abs"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Returns a copy of this Duration with all attributes made positive.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).abs()
      is duration(1, 2, 3, 4, 5, 6)
  end
 }

 @d-method["abs-normalized"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Returns a copy of this Duration normalized with all attributes made positive.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).abs-normalized()
      is duration(0, 10, 7, 20, 4, 54)
  end
 }

 @d-method["map"
           #:contract (a-arrow D (a-arrow N N) D)
           #:args (list (list "self" #f) (list "f" #f))
           #:return D
           ]

 Returns a copy of the Duration with each Duration attribute mapped by 'f'

 @examples{
  check:
    duration(0, 1, -1, 11/2, -22/7, 0).map(num-round)
      is duration(0, 1, -1, 6, -3, 0)
  end
 }

 @d-method["multiplied-by"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "coeff" #f))
           #:return D
           ]

 Returns a copy of this Duration multiplied by the passed scalar.

 @examples{
  check:
    duration(1, 2, 3, 4, 5, 6).multiplied-by(2)
      is duration(2, 4, 6, 8, 10, 12)
  end
 }

 @d-method["divided-by"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "divisor" #f))
           #:return D
           ]

 Returns a copy of this Duration divided by the passed scalar.

 @examples{
  check:
    duration(2, 4, 6, 8, 10, 12).divided-by(2)
      is duration(1, 2, 3, 4, 5, 6)
    duration(2, 4, 6, 8, 10, 12).divided-by(0)
      raises "division by zero"
  end
 }

 @d-method["equals"
           #:contract (a-arrow D D B)
           #:args (list (list "self" #f) (list "other" #f))
           #:return B
           ]

 Checks if this Duration is equal to the specified Duration.

 @examples{
  check:
    duration(1, 20, 39, 2, -1, -90).equals(duration(1, 20, 39, 2, -1, -90))
      is true
    duration(1, 20, 39, 2, -1, -90).normalize()
      is duration(2, 9, 4, 1, 57, 30)
    duration(1, 20, 39, 2, -1, -90).equals(duration(2, 9, 4, 1, 57, 30))
      is false
  end
 }

 @d-method["equals-normalized"
           #:contract (a-arrow D D B)
           #:args (list (list "self" #f) (list "other" #f))
           #:return B
           ]

 Checks if the normalized forms of this Duration and the specified Duration are equal.

 @examples{
  check:
    duration(1, 20, 39, 2, -1, -90).equals(duration(1, 20, 39, 2, -1, -90))
      is true
    duration(1, 20, 39, 2, -1, -90).normalize()
      is duration(2, 9, 4, 1, 57, 30)
    duration(1, 20, 39, 2, -1, -90).equals-normalized(duration(2, 9, 4, 1, 57, 30))
      is true
    duration(-1, -2, -3, -4, -5, -6).equals-normalized(duration(1, 2, 3, 4, 5, 6))
      is false
  end
 }

 @d-method["any"
           #:contract (a-arrow D (a-arrow N N) D)
           #:args (list (list "self" #f) (list "f" #f))
           #:return D
           ]

 Checks if 'f' applies to any attribute of Duration.

 @examples{
  check:
    duration(1, 2, -3, 4, 5, -6).any(lam(x): x > 0 end)
      is true
    duration(1, 2, 3, 4, 5, 6).any(lam(x): x < 0 end)
      is false
  end
 }

 @d-method["all"
           #:contract (a-arrow D (a-arrow N N) D)
           #:args (list (list "self" #f) (list "f" #f))
           #:return D
           ]

 Checks if 'f' applies to all attributes of Duration.

 @examples{
  check:
    duration(1, 2, -3, 4, 5, -6).all(lam(x): x > 0 end)
      is false
    duration(1, 2, 3, 4, 5, 6).all(lam(x): x < 0 end)
      is false
    duration(1, 2, 3, 4, 5, 6).all(lam(x): x > 0 end)
      is true
  end
 }

 @d-method["is-negative"
           #:contract (a-arrow D B)
           #:args (list (list "self" #f))
           #:return B
           ]

 Checks if this Duration is negative.

 @examples{
  check:
    duration(1, 2, 3, 4.09, 5, 6).is-negative()
      is false
    duration(-1, 2, -3, 4.09, -5, 6).is-negative()
      is true
    duration(-1, 20, -3, 4.09, -5, 6).is-negative()
      is false
  end
 }

 @d-method["is-zero"
           #:contract (a-arrow D B)
           #:args (list (list "self" #f))
           #:return B
           ]

 Checks if this Duration is 0.

 @examples{
  check:
    duration(0, 0, 1, -24, 1, -60).is-zero()
      is true
    duration(0, 0, 0, 0, 0, 0).is-zero()
      is true
    duration(1, 2, 3, 4.09, 5, 6).is-zero()
      is false
  end
 }

 @d-method["get-years"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of years in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-years()
      is 1
  end
 }

 @d-method["get-months"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of months in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-months()
      is -2
  end
 }

 @d-method["get-days"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of days in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-days()
      is 3
  end
 }

 @d-method["get-hours"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of hours in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-hours()
      is -4
  end
 }

 @d-method["get-minutes"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of minutes in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-minutes()
      is 5
  end
 }

 @d-method["get-seconds"
           #:contract (a-arrow D N)
           #:args (list (list "self" #f))
           #:return N
           ]

 Gets the number of seconds in this Duration.

 @examples{
  check:
    duration(1, -2, 3, -4, 5, -6).get-seconds()
      is -6
  end
 }

 @d-method["change-unit"
           #:contract (a-arrow D TU (a-arrow N N) D)
           #:args (list (list "self" #f) (list "unit" #f) (list "f" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified unit modified by 'f'.

 @examples{
  check:
    duration(-1, -2, -3, -4, -5, -6).change-unit(unit-day, lam(x): x / (-3) end)
      is duration(-1, -2, 1, -4, -5, -6)
  end
 }

 @d-method["minus"
           #:contract (a-arrow D D D)
           #:args (list (list "self" #f) (list "other" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified Duration subtracted.

 @examples{
  check:
    duration(1, 2, 3, 4, 5, 6).minus(duration(0, 1, 3, 5, 6, 99))
      is duration(1, 1, 0, -1, -1, -93)
  end
 }

 @d-method["minus-unit"
           #:contract (a-arrow D N TU D)
           #:args (list (list "self" #f) (list "amt" #f) (list "unit" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified 'amt' in 'unit' subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-unit(-7, unit-year)
      is duration(19, 6, 7, 22, 45, 37)
  end
 }

 @d-method["minus-years"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "years" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified years subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-years(1)
      is duration(11, 6, 7, 22, 45, 37)
  end
 }

 @d-method["minus-months"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "months" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified months subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-months(1)
      is duration(12, 5, 7, 22, 45, 37)
  end
 }

 @d-method["minus-days"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "days" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified days subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-days(1)
      is duration(12, 6, 6, 22, 45, 37)
  end
 }

 @d-method["minus-hours"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "hours" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified hours subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-hours(1)
      is duration(12, 6, 7, 21, 45, 37)
  end
 }

 @d-method["minus-minutes"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "minutes" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified minutes subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-minutes(1)
      is duration(12, 6, 7, 22, 44, 37)
  end
 }

 @d-method["minus-seconds"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "seconds" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified seconds subtracted.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-seconds(1)
      is duration(12, 6, 7, 22, 45, 36)
  end
 }

 @d-method["plus"
           #:contract (a-arrow D D D)
           #:args (list (list "self" #f) (list "other" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified Duration added.

 @examples{
  check:
    duration(1, 2, 3, 4, 5, 6).plus(duration(0, 1, -3, 5, 6, -99))
      is duration(1, 3, 0, 9, 11, -93)
  end
 }

 @d-method["plus-unit"
           #:contract (a-arrow D N TU D)
           #:args (list (list "self" #f) (list "amt" #f) (list "unit" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified 'amt' in 'unit' added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-unit(-7, unit-year)
      is duration(5, 6, 7, 22, 45, 37)
  end
 }

 @d-method["plus-years"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "years" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified years added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-years(1)
      is duration(13, 6, 7, 22, 45, 37)
  end
 }

 @d-method["plus-months"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "months" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified months added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-months(1)
      is duration(12, 7, 7, 22, 45, 37)
  end
 }

 @d-method["plus-days"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "days" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified days added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).minus-days(1)
      is duration(12, 6, 8, 22, 45, 44)
  end
 }

 @d-method["plus-hours"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "hours" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified hours added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-hours(1)
      is duration(13, 6, 7, 23, 45, 37)
  end
 }

 @d-method["plus-minutes"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "minutes" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified minutes added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-minutes(1)
      is duration(12, 6, 7, 22, 46, 37)
  end
 }

 @d-method["plus-seconds"
           #:contract (a-arrow D N D)
           #:args (list (list "self" #f) (list "seconds" #f))
           #:return D
           ]

 Returns a copy of this Duration with the specified seconds added.

 @examples{
  check:
    duration(12, 6, 7, 22, 45, 37).plus-seconds(1)
      is duration(12, 6, 7, 22, 45, 38)
  end
 }


 @d-method["to-unit"
           #:contract (a-arrow D TU D)
           #:args (list (list "self" #f) (list "unit" #f))
           #:return D
           ]

 Converts this Duration to the given unit.

 @examples{
  check:
    duration(1, 0, 365, 8760, 525600, 31536000).to-unit(unit-year)
      is duration(5, 0, 0, 0, 0, 0)
  end
 }

 @d-method["to-years"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to years.

 @examples{
  check:
    duration(1, 0, 365, 8760, 525600, 31536000).to-years()
      is duration(5, 0, 0, 0, 0, 0)
  end
 }

 @d-method["to-months"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to months.

 @examples{
  check:
    duration(0, 1, 30, 720, 43200, 2592000).to-months()
      is duration(0, 5, 0, 0, 0, 0)
  end
 }

 @d-method["to-days"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to days.

 @examples{
  check:
    duration(1/365, 1/30, 1, 24, 1440, 86400).to-days()
      is duration(0, 0, 6, 0, 0, 0)
  end
 }

 @d-method["to-hours"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to hours.

 @examples{
  check:
    duration(0, 0, 1/24, 1, 60, 3600).to-hours()
      is duration(0, 0, 0, 4, 0, 0)
  end
 }

 @d-method["to-minutes"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to minutes.

 @examples{
  check:
    duration(0, 0, 0, 1/60, 1, 60).to-minutes()
      is duration(0, 0, 0, 0, 3, 0)
  end
 }

  @d-method["to-minutes"
           #:contract (a-arrow D D)
           #:args (list (list "self" #f))
           #:return D
           ]

 Converts this Duration to seconds.

 @examples{
  check:
    duration(0, 0, 0, 0, 1/60, 1).to-seconds()
      is duration(0, 0, 0, 0, 0, 2)
  end
 }

 @d-method["to-string"
           #:contract (a-arrow D S)
           #:args (list (list "self" #f))
           #:return S
           ]

 A string representation of this Duration using ISO-8601 seconds based
 representation in normalized form, such as "PT8H6M12.345S".

 @examples{
  check:
    duration(1, 2, 3, 4, 5, 6).to-string()
      is "P1Y2M3DT4H5M6S"
    duration(1, 0, 0, 8, 6, 12.345).to-string()
      is "P1YT8H6M12.345S"
  end
 }

 @section{Duration Functions}

 These functions require the Duration module to be
 @pyret{import}ed, as indicated in the examples.

 @margin-note{The input is not normalized, and is instead stored as is to account
  for computational use cases.}

 @function["duration-of-any"
           #:contract (a-arrow N N N N N N D)
           #:args '(("years" #f) ("months" #f) ("days" #f) ("hours" #f) ("minutes" #f) ("seconds" #f))
           #:return D
           ]{

  Obtains a duration representing an amount from the values of the different temporal units.

  @examples{
   check:
     duration-of-any(1, 6, 5, 22, 43, 59)
       is duration(1, 6, 5, 22, 43, 59)
   end
  }
 }

 @function["duration-of-ymd"
           #:contract (a-arrow N N N D)
           #:args '(("years" #f) ("months" #f) ("days" #f))
           #:return D
           ]{

  Obtains a duration representing an amount from the values of the years, months,
  and days.

  @examples{
   check:
     duration-of-ymd(-4, -10, -21)
       is duration(-4, -10, -21, 0, 0, 0)
   end
  }
 }

 @function["duration-of-hms"
           #:contract (a-arrow N N N D)
           #:args '(("hours" #f) ("minutes" #f) ("seconds" #f))
           #:return D
           ]{

  Obtains a duration representing an amount from the values of the hours, minutes,
  and seconds.

  @examples{
   check:
     duration-of-hms(-5, -3, -11)
       is duration(0, 0, 0, -5, -3, -11)
   end
  }
 }

 @function["duration-of-years"
           #:contract (a-arrow N D)
           #:args '(("years" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of years.

  @examples{
   check:
     duration-of-years(1)
       is duration(1, 0, 0, 0, 0, 0)
   end
  }
 }

 @function["duration-of-months"
           #:contract (a-arrow N D)
           #:args '(("months" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of months.

  @examples{
   check:
     duration-of-months(1)
       is duration(0, 1, 0, 0, 0, 0)
   end
  }
 }

 @function["duration-of-days"
           #:contract (a-arrow N D)
           #:args '(("days" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of days.

  @examples{
   check:
     duration-of-days(1)
       is duration(0, 0, 1, 0, 0, 0)
   end
  }
 }

 @function["duration-of-hours"
           #:contract (a-arrow N D)
           #:args '(("hour" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of hours.

  @examples{
   check:
     duration-of-years(1)
       is duration(0, 0, 0, 1, 0, 0)
   end
  }
 }

 @function["duration-of-minutes"
           #:contract (a-arrow N D)
           #:args '(("years" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of minutes.

  @examples{
   check:
     duration-of-hours(1)
       is duration(0, 0, 0, 0, 1, 0)
   end
  }
 }

 @function["duration-of-seconds"
           #:contract (a-arrow N D)
           #:args '(("seconds" #f))
           #:return D
           ]{

  Obtains a Duration representing a number of seconds.

  @examples{
   check:
     duration-of-years(1)
       is duration(0, 0, 0, 0, 0, 1)
   end
  }
 }
            
}